<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using SolrNet.Attributes;
// ReSharper disable UnusedAutoPropertyAccessor.Global

namespace Gyldendal.Api.CoreData.SolrContracts.ClubPeriod
{
	public class ClubPeriod
	{
		<#

		var csvFilePath = Host.ResolvePath(@"SolrSchema.csv");

		var allLines = System.IO.File.ReadAllLines(csvFilePath);
		var schemaFieldEnumMembers = new System.Text.StringBuilder();

		var schemaFileds = new StringBuilder();
		foreach (var line in allLines.Skip(1))
		{
			var attribs = line.Split(new char[] { ',' });
        
			var solrFieldName = attribs[1];
			var propertyName = attribs[2];
			var propertyDataType = attribs[3];
			var isUniqueKey = attribs[10] == "1";
			var isRetrievable = attribs[5] == "1";
			var isCopyField = attribs[8] == "1";
			var isSelfCopy = attribs[12] == "1" ? true : false;
			
			if(isSelfCopy)
				continue;
			
			if(!(string.IsNullOrWhiteSpace(propertyName)))
			{
				schemaFieldEnumMembers.AppendLine("\t\t[ClubPeriodSchemaFieldMeta(\"" + solrFieldName  + "\")]");
				schemaFieldEnumMembers.AppendLine("\t\t" + propertyName + ",");
			}
			

			if(propertyDataType == "text_general"
			|| propertyDataType == "exact_match"
			|| propertyDataType == "substring_match"
			|| propertyDataType == "text_da"
			|| propertyDataType == "text_startsWith"
			|| propertyDataType == "lowercase")
			{
				propertyDataType = "string";
			}
			else if(propertyDataType == "boolean")
			{
				propertyDataType = "bool";
			}
			else if(propertyDataType == "date")
			{
				propertyDataType = "DateTime";
			}
			var isArray = attribs[7] == "1";
			if(isCopyField || string.IsNullOrEmpty(propertyName))
			{
				continue;
			}

			if(isCopyField)
			{
				continue;
			}

			if(isUniqueKey)
			{#>
[SolrUniqueKey("<#= solrFieldName #>")]<#
		} 
		else 
		{
			if(!(isRetrievable))
			{#>

		/// <summary>
        /// Index only field, not for retrieving purposes.
        /// </summary><#}#> 
		[SolrField("<#= solrFieldName #>")]<#
			}#>

		public <#= propertyDataType + (isArray ? "[]" : "") + " " + propertyName #> { get; set; }
	<#}#>
}

	public enum ClubPeriodSchemaField
	{
<#= schemaFieldEnumMembers.ToString() #>
	}
}
